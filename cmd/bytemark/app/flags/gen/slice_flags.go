package main

import (
	"flag"
	"fmt"
	"io"
	"os"
	"text/template"
	"unicode"
)

type tmplData struct {
	TypeName string
}

// ok for this bad boy you gotta set the arguments as all the types you wanna
// generate slice flags for.
func main() {
	outputFile := flag.String("o", "-", "File to output to. Blank or - for stdin")
	templateFile := flag.String("t", "", "File to use as template")

	flag.Parse()

	typeNames := flag.Args()
	var err error

	tmpl := template.New("jeff")
	tmpl = tmpl.Funcs(map[string]interface{}{
		"lcfirst": lcFirst,
	})

	_, err = tmpl.ParseFiles(*templateFile)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	var wr io.WriteCloser = os.Stdout
	if *outputFile != "" && *outputFile != "-" {
		wr, err = os.Create(*outputFile)
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}
	}

	_, err = wr.Write([]byte(header))
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	for _, typeName := range typeNames {
		err = tmpl.ExecuteTemplate(wr, "slice_template.go.tmpl",
			tmplData{TypeName: typeName})
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}
	}
	wr.Close()
}

func lcFirst(in string) string {
	runes := []rune(in)
	runes[0] = unicode.ToLower(runes[0])
	return string(runes)
}

const header = `package flags

// This file was autogenerated from slice_template.go.tmpl using
// gen/slice_flags.go - do not edit it by hand (unless this IS
// slice_template.go.tmpl, in which case go right ahead!!)

import (
	"flag"

	"github.com/BytemarkHosting/bytemark-client/cmd/bytemark/app"
	"github.com/BytemarkHosting/bytemark-client/lib"
)

`
